package control_circuit;

import definitions.*;

class Timer_Relay {
    Ports:
        Electrical powerConnection1;
        Electrical powerConnection2;
        Electrical clientPowerConnection1;
        Electrical clientPowerConnection2;

    Variables:
         // Whether the component is damaged
        Enum[Nominal, Defect] failureMode = Nominal;
        // Whether the component is powered
        Boolean isPowered = False;
        // Client connections connected by default
        Boolean isClientConnected = True;

    Behavior:
        if(failureMode == Nominal) {
            connect { r=1 } (powerConnection1, powerConnection2);
        }
        if(failureMode == Defect) {
            connect { r=0 } (powerConnection1, powerConnection2);
        }

    Transitions:
        // Component is not powered if no power is received & the component is not damaged
        when (flow.om(powerConnection1, powerConnection2) == null) [failureMode == Nominal && isPowered == True] {
            isPowered = False;
        }
         // Power component if power is received & the component is not damaged
        when(flow.om(powerConnection1, powerConnection2) != null) [failureMode == Nominal && isPowered == False] {
            isPowered = True;
        }
        // Disconnect client connections
        when { delay = 2 } (flow.om(powerConnection1, powerConnection2) != null) [failureMode == Nominal && isPowered == False] {
            isClientConnected = False;
        }

}
